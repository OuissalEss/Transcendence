# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""The type of the user-achievement Achievements."""
enum Achievement {
  loyal
  robot
  social
  team
  welcome
  winning
}

type Avatar {
  """The date when the avatar was created"""
  createdAt: DateTime!

  """Default filename of the avatar"""
  defaultFilename: String!

  """Filename of the avatar"""
  filename: String!

  """Unique identifier for the avatar"""
  id: String!

  """The date when the avatar was last updated"""
  updatedAt: DateTime!

  """The ID of the associated user"""
  userId: String!
}

type Block {
  """User who get blocked"""
  blockedUser: User!

  """User who is blocked"""
  blockedUserId: String!

  """User who blocked"""
  blocker: User!

  """User who blocked another user"""
  blockerId: String!

  """Date the block relationship was created"""
  createdAt: DateTime!

  """The unique identifier of the block relationship."""
  id: ID!

  """Date the block relationship was updated"""
  updatedAt: DateTime!
}

type Channel {
  """Users participating in the channel"""
  channel: [ChannelUser!]!

  """Date the channel was created"""
  createdAt: DateTime!

  """The unique identifier of the channel."""
  id: ID!

  """Channel password"""
  password: String

  """Channel title"""
  title: String!

  """Channel type"""
  type: ChannelType!

  """Date the channel was updated"""
  updatedAt: DateTime!
}

"""The type of the channel"""
enum ChannelType {
  DM
  PRIVATE
  PROTECTED
  PUBLIC
}

type ChannelUser {
  """Channel ID"""
  channelId: String!

  """Date the channel user was created"""
  createdAt: DateTime!
  id: ID!

  """Messages sent by the user in the channel"""
  message: [Message!]!

  """Type of user in the channel"""
  type: UserType!

  """Date the channel user was updated"""
  updatedAt: DateTime!

  """User IDr"""
  userId: String!
}

"""The type of the user character."""
enum Character {
  Aegon
  Aurora
  Lumina
  Luna
  None
  Nova
  Starlight
}

type Connection {
  """The date when the connection was created"""
  createdAt: DateTime!

  """Unique identifier of the connection"""
  id: String!

  """
  Indicates whether two-factor authentication is enabled for the connection
  """
  is2faEnabled: Boolean!

  """One-time password associated with the connection"""
  otp: String

  """The date when the one-time password was created"""
  otpCreatedAt: DateTime

  """Provider of the connection"""
  provider: String!

  """Provider ID of the connection"""
  providerId: String!

  """The date when the connection was last updated"""
  updatedAt: DateTime!

  """The ID of the associated user"""
  userId: String!
}

input CreateMatchInput {
  """Guest ID of the user"""
  guestId: String!

  """Guest score"""
  guest_score_m: Float!

  """Host ID of the user"""
  hostId: String!

  """Host score"""
  host_score_m: Float!
}

input CreateMessageInput {
  """Channel User who sent the message"""
  channelId: String!
  id: ID!

  """Content of the message"""
  text: String!

  """Time the message was sent"""
  time: DateTime!
}

input CreateNotificationInput {
  """Read status of the notification"""
  isRead: Boolean! = false

  """User who received the notification"""
  receiverId: String!

  """User who sent the notification"""
  senderId: String!

  """Time the notification was sent"""
  time: DateTime!

  """Type of notification"""
  type: NotificationType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Friend {
  """Date the user achievement was created"""
  createdAt: DateTime!

  """The unique identifier of the friend relationship"""
  id: String!

  """Friend request acceptance status"""
  isAccepted: Boolean!

  """User who receive the friend request"""
  receiver: User!

  """User who receive the friend request"""
  receiverId: String!

  """User who receive the friend request"""
  sender: User!

  """User who sent the friend request"""
  senderId: String!

  """Date the user achievement was updated"""
  updatedAt: DateTime!
}

type Match {
  """Date the match was created"""
  createdAt: DateTime!

  """User who participated as a guest in the match"""
  guestId: String!

  """Score of the guest in the match"""
  guest_score_m: Int!

  """User who hosted the match"""
  hostId: String!

  """Score of the host in the match"""
  host_score_m: Int!
  id: String!

  """User who lost the match"""
  loserId: String

  """Start time of the match"""
  start_m: DateTime!

  """Date the match was updated"""
  updatedAt: DateTime!

  """User who won the match"""
  winnerId: String
}

type Message {
  """Channel User who sent the message"""
  channelId: ChannelUser!

  """Date the Message was created"""
  createdAt: DateTime!
  id: ID!

  """Content of the message"""
  text: String!

  """Time the message was sent"""
  time: DateTime!

  """Date the Message was updated"""
  updatedAt: DateTime!
}

type Mutation {
  """create friend with their associated id"""
  createFriend(receiverId: String!, senderId: String!): Friend!

  """Creates a new match."""
  createMatch(createMatchInput: CreateMatchInput!): Match!
  createMessage(input: CreateMessageInput!): Message!
  createNotification(input: CreateNotificationInput!): Notification!
  deleteChannelUser(id: String!): ChannelUser!

  """Delete friend with their associated id"""
  deleteFriend(friendId: String!): Friend!
  desactivate2Fa: User!

  """Delete block with their associated id"""
  unBlock(blockId: String!): Block!

  """update friend with their associated id"""
  updateAccept(friendId: String!): Friend!
  updateChannelTypeUser(id: String!, type: String!): ChannelUser!
  updateFirstName(firstname: String!): User!

  """Updates the score of the guest in a match."""
  updateGuestScore(guest_score: Float!, matchId: String!): Match!

  """Updates the score of the host in a match."""
  updateHostScore(host_score: Float!, matchId: String!): Match!
  updateIsRead(id: String!): Notification!
  updateLastName(firstname: String!): User!

  """Updates the winner of a match."""
  updateMatchWinner(matchId: String!, match_winner: String!): Match!
  updateUserAvatar(newAvatar: String!): User!
  updateUserCharacter(character: String!): User!
  updateUserStatus(status: String!): User!
  updateUsername(username: String!): User!
}

type Notification {
  """Date the notification was created"""
  createdAt: DateTime!
  id: ID!

  """Read status of the notification"""
  isRead: Boolean!

  """User who receive the notification"""
  receiver: User!

  """User who received the notification"""
  receiverId: String!

  """User who receive the notification"""
  sender: User!

  """User who sent the notification"""
  senderId: String!

  """Time the notification was sent"""
  time: DateTime!

  """Type of notification"""
  type: NotificationType!

  """Date the notification was updated"""
  updatedAt: DateTime!
}

"""The type of the notification"""
enum NotificationType {
  ACHIEVEMENT
  FRIEND_REQUEST
  MESSAGE
}

type Query {
  """Retrieves all blocks with their associated data"""
  getAllBlocks: [Block!]!
  getAllChannelUsers: [ChannelUser!]!

  """Get all channels"""
  getAllChannels: [Channel!]!

  """Retrieves all friends with their associated data"""
  getAllFriends: [Friend!]!

  """Retrieves all matches associated with a specific user."""
  getAllMatches(userId: String!): [Match!]!
  getAllMessages: [Message!]!
  getAllNotifications: [Notification!]!

  """Retrieves all users with their associated data"""
  getAllUsers: [User!]!

  """Retrieves block with their associated id"""
  getBlockById(blockId: String!): Block!

  """Get a channel by ID"""
  getChannelById(id: String!): Channel!
  getChannelUserById(id: String!): ChannelUser!

  """Retrieves friend with their associated id"""
  getFriendById(friendId: String!): Friend!

  """Retrieves a specific match by its ID."""
  getMatchById(id: String!): Match!
  getMessageById(id: String!): Message!
  getNotificationById(id: String!): [Notification!]!

  """Retrieves all blocks with their associated data"""
  getUserBlocked: [Block!]!

  """Retrieves a specific user with it's id"""
  getUserById(id: String!): User!

  """Retrieves all friends with their associated data"""
  getUserFriends: [User!]!

  """Retrieves all friends where the user is the receiver"""
  getUserFriendsReceiver: [Friend!]!

  """Retrieves all friends where the user is the sender"""
  getUserFriendsSender: [Friend!]!

  """Retrieves authenticated user information"""
  getUserInfo: User!
  getUserNotifications: [Notification!]!

  """Searches for users based on the provided query"""
  searchUsers(query: String!): [User!]!
}

"""The type of the user status."""
enum Status {
  INGAME
  OFFLINE
  ONLINE
}

type User {
  """User achievements"""
  achievements: [UserAchievement!]!

  """The associated avatar entity"""
  avatar: Avatar

  """Users who blocked the user"""
  blocked: [Block!]!

  """User blocked users"""
  blocking: [Block!]!

  """User character"""
  character: Character!

  """User connection"""
  connection: Connection

  """Date the user was created"""
  createdAt: DateTime!

  """User email address"""
  email: String!

  """User first name"""
  firstName: String!

  """Matches where the user is the guest"""
  guest: [Match!]!

  """Matches where the user is the host"""
  host: [Match!]!
  id: ID!

  """User last name"""
  lastName: String!

  """Matches where the user is the loser"""
  loser: [Match!]!

  """User received friend requests"""
  receive: [Friend!]!

  """User received notifications"""
  receiver: [Notification!]!

  """User sent friend requests"""
  send: [Friend!]!

  """User sent notifications"""
  sender: [Notification!]!

  """User status"""
  status: Status!

  """Date the user was last updated"""
  updatedAt: DateTime!

  """User's channel participation"""
  user: [ChannelUser!]!

  """User username"""
  username: String!

  """Matches where the user is the winner"""
  winner: [Match!]!

  """User experience points"""
  xp: Int
}

type UserAchievement {
  """User character"""
  achievement: Achievement!

  """Date the user achievement was created"""
  createdAt: DateTime!
  id: String!

  """Date the user achievement was updated"""
  updatedAt: DateTime!

  """User associated with this achievement"""
  userId: String!
}

"""The type of the user"""
enum UserType {
  ADMIN
  OWNER
  USER
}